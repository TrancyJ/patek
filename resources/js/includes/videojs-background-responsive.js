"use strict"; function _classCallCheck(e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") } function _possibleConstructorReturn(e, t) { if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || "object" != typeof t && "function" != typeof t ? e : t } function _inherits(e, t) { if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t) } var _createClass = function () { function e(e, t) { for (var n = 0; n < t.length; n++) { var r = t[n]; r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r) } } return function (t, n, r) { return n && e(t.prototype, n), r && e(t, r), t } }(); !function () { var e = null; e = "undefined" == typeof window.videojs && "function" == typeof require ? require("video.js") : window.videojs, function (e, t) { var n = t.getPlugin("plugin"), r = function (t) { function n(e, t) { return _classCallCheck(this, n), _possibleConstructorReturn(this, (n.__proto__ || Object.getPrototypeOf(n)).call(this, e, t)) } return _inherits(n, t), _createClass(n, [{ key: "setUpBg", value: function (t) { this.bg = t, this.player.posterImage.addClass(t); var n = this; e.setTimeout(function () { n.player.posterImage.show() }, 10), this.player.posterImage.show() } }]), n }(n); t.registerPlugin("setUpBgResponsive", r) }(window, e) }();